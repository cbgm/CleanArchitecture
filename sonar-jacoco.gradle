apply plugin: 'jacoco'
apply plugin: "org.sonarqube"

def instrumentationFileName = ""

jacoco {
   toolVersion = "0.8.2"
}

sonarqube {
   androidVariant 'debug'

   properties {
      property "sonar.verbose", true
      property "sonar.host.url", "http://localhost:9000"
      property "sonar.issuesReport.html.enable", "true"
      property "sonar.issuesReport.console.enable", "true"
      property "detekt.sonar.kotlin.config.path", "${rootProject.projectDir}/detekt-config.yml"
      property "sonar.sources", "**/src/main/java"
      property "sonar.tests", "**/src/test/java"
      property "sonar.java.coveragePlugin", "jacoco"
      property "sonar.java.binaries", "${rootProject.projectDir}/app/build/intermediates/classes," +
            "${rootProject.projectDir}/app/build/tmp/kotlin-classes"
      property 'sonar.jacoco.reportPaths', "${rootProject.projectDir}/app/build/jacoco/testDebugUnitTest.exec"
      //property "sonar.jacoco.itReportPath", instrumentationFileName
   }
}

task createTestReports(type: JacocoReport, dependsOn: ["cart:testDebugUnitTest"/*, "app:createDebugCoverageReport"*/]) {
   group = "Reporting"

   reports {
      xml.enabled = true
      html.enabled = true
   }

   def fileFilter = ['**/R.class',
         '**/R$*.class',
         '**/BuildConfig.*',
         '**/*$ViewInjector*.*',
         '**/*$ViewBinder*.*',
         '**/*$MembersInjector*.*',
         '**/Manifest*.*',
         '**/*Test*.*',
         'android/**/*.*',
         '**/*.json'
   ]

   def debugTree = fileTree(dir: "**/${buildDir}/intermediates/classes/debug", excludes: fileFilter)
   def mainSrc = "**/src/main/java"

   sourceDirectories = files([mainSrc])
   classDirectories = files([debugTree])
   executionData = files("**/${project.buildDir}/jacoco/testDebugUnitTest.exec")

   /*def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
   def mainSrc = "${project.projectDir}/src/main/java"

   sourceDirectories = files([mainSrc])
   classDirectories = files([debugTree])

   executionData = files("${project.buildDir}/jacoco/testDebugUnitTest.exec")
   def files = fileTree("${buildDir}/outputs/code-coverage/connected/debug/").filter { it.isFile() }.files.name
   instrumentationFileName = "${buildDir}/outputs/code-coverage/connected/debug/" + files[0]*/
}