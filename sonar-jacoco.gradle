apply plugin: 'jacoco'
apply plugin: "org.sonarqube"


jacoco {
   toolVersion = "$jacocoVersion"
   reportsDir = file("$buildDir/reports")
}

sonarqube {
   androidVariant 'debug'

   properties {
      property "sonar.verbose", true
      property "sonar.host.url", "http://localhost:9000"
      property "sonar.issuesReport.html.enable", "true"
      property "sonar.issuesReport.console.enable", "true"
      property "detekt.sonar.kotlin.config.path", "${rootProject.projectDir}/detekt-config.yml"
      property "sonar.sources", "**/src/main/java"
      property "sonar.tests", "**/src/test/java"
      property "sonar.java.coveragePlugin", "jacoco"
      property "sonar.java.binaries", "${rootProject.projectDir}/app/build/intermediates/classes," +
            "${rootProject.projectDir}/app/build/tmp/kotlin-classes"
      property 'sonar.jacoco.reportPaths',
            "${rootProject.projectDir}/app/build/jacoco/testDebugUnitTest.exec"
   }
}

task createTestReports(type: JacocoReport, dependsOn: ['cart:testDebugUnitTest', 'cart:createDebugCoverageReport']) {

   reports {
      xml.enabled = true
      html.enabled = true
   }

   def excludes = [
         '**/R.class',
         '**/R$*.class',
         '**/*$ViewInjector*.*',
         '**/BuildConfig.*',
         '**/Manifest*.*',
         '**/*Test*.*',
         'android/**/*.*',
         '**/*Fragment.*',
         '**/*Activity.*'
   ]



   def kotlinDebugTree = fileTree(dir: "$buildDir/tmp/kotlin-classes/debug", excludes: excludes)
   def debugTree = fileTree(dir: "$buildDir/intermediates/classes/debug", excludes: excludes)
   def mainSrc = "$projectDir/src/main/java"

   sourceDirectories = files([mainSrc])
   classDirectories = files([debugTree], [kotlinDebugTree])
   executionData = fileTree(dir: project.buildDir, includes: [
         'jacoco/testDebugUnitTest.exec', 'outputs/code_coverage/debugAndroidTest/connected/**/*.ec'
   ])
}